services:

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    environment:
      REDIS_HOST: ${REDIS_HOST}

  postgresql:
    image: 'postgres:latest'
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
        interval: 10s
        timeout: 5s
        retries: 5

  minio:
    container_name: minio
    image: bitnami/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - 'minio:/bitnami/minio/data'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS}

  business:
    image: business:latest
    build: ./business
    ports:
      - '5000:5000'
    volumes:
      - .:/business
    environment:
      RAILS_ENV: ${RAILS_ENV}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    depends_on:
      - postgresql
      - redis

  business_sidekiq:
    image: buisness_sidekiq:latest
    build: ./business
    command: bundle exec sidekiq
    volumes:
      - .:/business
    environment:
      RAILS_ENV: ${RAILS_ENV}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    depends_on:
      redis:
        condition: service_healthy

  core:
    image: core
    build: ./core
    ports:
      - '4000:4000'
    volumes:
      - .:/core
    environment:
      RAILS_ENV: ${RAILS_ENV}
    depends_on:
      - postgresql
      - redis

  core_sidekiq:
    image: core_sidekiq:latest
    build: ./core
    command: bundle exec sidekiq
    volumes:
      - .:/core
    environment:
      RAILS_ENV: ${RAILS_ENV}
    depends_on:
      redis:
        condition: service_healthy

  storage_api:
    image: storage_api:latest
    build: ./storage_api
    ports:
      - '7000:7000'
    volumes:
      - .:/storage_api
    environment:
      RAILS_ENV: ${RAILS_ENV}
    depends_on:
      - postgresql

  # core-front:
  #   image: core-front:latest
  #   build: ./core-front
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #    - .:/core-front
  #    - node_modules:/app/node_modules
  #   environment:
  #     NODE_ENV: ${NODE_ENV}
  #     CORE_URL: ${CORE_URL}
  #   stdin_open: true
  #   tty: true
  #   command: npm start

volumes:
  postgres_data:
  redis_data:
  node_modules:
  minio:
    driver: local